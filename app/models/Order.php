<?php

namespace app\models;

use RedBeanPHP\R;

class Order extends AppModel { // Модель (класс) для обработки заказа товаров пользователя

    public static function saveOrder ($data): int|false { // Метод для сохранения заказа пользователя. Принимает на вход данные $data с формы оформления заказа. Возвращать будет номер заказа или false

        // Чтобы данные не потерялись (если какой-то из SQL запросов вернет ошибку), чтобы сохранить целостность переданных пользователем данных, принято использовать механизм трансзакций в SQL. Используем RedBeanPHP и для трансзакций у него есть следующая конструкция
        R::begin (); // Вызываем метод begin
        try { // Используем блок try-catch. В этом блоке мы будем выполнять SQL запросы
            // 1. Нам нужно сохранить заказ и получить номер заказа
            $order = R::dispense ('orders'); // В переменную $order
            $order->user_id = $data['user_id']; // Мы заполним все необходимые свойства запроса $order с предыдущего шага (в RedBeanPHP называется Bean). Передаем user_id
            $order->note = $data['note']; // Передаем примечания note
            $order->total = $_SESSION['cart.sum']; // Передаем общую сумму заказа
            $order->qty = $_SESSION['cart.qty']; // Передаем общее количество товаров
            $order_id = R::store ($order); // В переменную $order_id получаем номер заказа
              // Вызываем метод, который будет сохранять товары заказа

            R::commit ();// Чтобы выполнить трансзакцию, мы вызываем метод commit
            return $order_id; // Вернем номер заказа
        } catch (\Exception $e) { // Здесь пойдут ошибки и исключения
            R::rollback (); // Откатим все запросы, которые были выполнены на текущий момент по данной трансзакции
            return false;
        }
    }

}