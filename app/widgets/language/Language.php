<?php

namespace app\widgets\language;

use RedBeanPHP\R;
use wfm\App;

class Language { // Виджет для переключения языков

    protected $tpl; // В нем будет храниться шаблон (html-код данного виджета), который будет реализовывать данный виджет для языков
    protected $languages; // В нем мы будем хранить все имеющиеся языки
    protected $language; // В нем мы будем хранить текущий язык (активный язык, выбранный текущим пользователем на сайте)

    public function __construct () { // Если мы захотим в будущем переопределить шаблон

        $this->tpl = __DIR__ . '/lang_tpl.php'; // Прописываем путь к файлу шаблона
        $this->run(); // При вызове виджета из нужной части представления, вызывать метод "run"
    }

    protected function run () { // Данный метод будет получать "languages" и "language"

        $this->languages = App::$app->getProperty ('languages'); // Свойство, мы в него записываем то, что у нас будет в контейнере (список языков)
        $this->language = App::$app->getProperty ('language'); // Свойство, мы в него записываем то, что у нас будет в контейнере (активный язык)
        echo $this->getHtml (); // Выводим метод getHtml
    }

    public static function getLanguages (): array { // Метод будет получать список (массив) доступных языков на сайте

        return R::getAssoc ("SELECT code, title, base, id FROM language ORDER BY base DESC"); // Метод возвращает ассоциативный массив. !-->> В качестве ключей массива будут поля, которые переданы первыми !!!

    }

    public static function getLanguage ($languages) { // Метод будет получать активный текущий язык на сайте

        $lang = App::$app->getProperty ('lang'); // Попытаемся получить из контейнера по ключу "lang" данные о языке
        if ($lang && array_key_exists ($lang, $languages)) { // Проверим, если переменная "lang" существует и ее ключ тоже существует в массиве "languages", те, есть ли вообще запрашиваемый пользователем язык у нас на сайте
            $key = $lang; // В переменную "$key" кладем строку, например, "en", в случае, если язык существует и он не базовый
        } elseif (!$lang) { // Если у нас нет языка в адресной строке (это значит, что используется язык по умолчанию)
            $key = key ($languages); // Данная функция "key" берет текущий ключ массива, который будет базовым языком по умолчанию
        } else { // Если оба условий выше не выполнились, значит, пользователь запросил какой-либо не существующий язык
            $lang = h($lang); // Функция для обработки данных, которые могут прийти динамически
            throw new \Exception("Not found language {$lang}", 404); // Выводим исключение, что такой язык не найден
        }
        $lang_info = $languages[$key] ; // Переменная, в которой будет храниться информация о текущем активном языке сайта в виде массива или строки (при выводе исключения об ошибке).
        $lang_info['code'] = $key;
        return $lang_info;
    }

    protected function getHtml(): string {  // Выводим на страницу переключатель языков
        ob_start (); // Включаем буферизацию вывода, чтобы можно было вывести результат в другом месте
        require_once $this->tpl; // Подключаем шаблон языкового виджета. Если мы захотим выводить шаблон языкового виджета (переключение языков) несколько раз на сайте (например, в хедере и футере), тогда нам нужно использовать функцию подклюения "require"
        return ob_get_clean (); // Возвращаем содержимое буфера обмена
    }

}