<?php

function debug ($data, $die = false) { // Функция для наглядной распечатки массивов или объектов

    echo '<pre>' . print_r ($data, 1) .  '</pre>';
    if ($die) {
        die;
    }

}

function h ($str) { // Функция для обработки данных, которые могут прийти динамически: там где не нужно выполнение html кода, данные от пользователя или неизвестного источника (могут содержать вредоносный код - XSS уязвимость) - их обрабатывают с помощью htmlspecialchars или htmlentities

    return htmlspecialchars ($str);

}

function redirect ($http = false) { // Функция для перенаправления запроса при смене языка пользователем
    if ($http) { // Если нам передан конкретный адрес, тогда в переменную "$redirect" мы запишем "$http"
        $redirect = $http;
    } else { // Если адрес не передан, нам нужно вернуть пользователя (редирект) на ту страницу, с которой он пришел. Если ее нет, мы перенаправим его на главную страницу
        $redirect = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : PATH;
    }
    header ("Location: $redirect"); // Делаем редирект на страницу, путь к которой у нас попал в переменную "$redirect"
    die; // Обязательно завершаем выполнение скрипта, чтобы дальнейший код не выполнялся

}

function base_url () { // Данная функция будет получать базовый url для учета языка использования на сайте

    return PATH . '/' . (\wfm\App::$app->getProperty ('lang') ? \wfm\App::$app->getProperty ('lang') . '/' : '');  // Возвращаем константу "PATH" (где находится адрес сайта без учета языка), добавляем слеш '/' (константа идет без слеша на конце), если у нас есть язык код языка, тогда добавляем его и в конце слеш, если нет, вместо кода языка добавляем пустую строку

}

/**
 * @param string $key Key of $_GET array
 * @param string $type Values of 'i', 'f', 's'
 * @return float|int|string
 */
function get ($key, $type = 'i') { // Данная функция будет получать данные из массива $_GET по ключу "$key" (названию элемента массива $_GET, который нам нужен). Дополнительно, данная функция будет проводить минимальную валидацию по типу данных "$type" (int, float, string)

    $param = $key; // Например, наша функция get('page') должна получить данные массива $_GET('page') по ключу "$key" = 'page'.
    $$param = $_GET[$param] ?? '';  // Возможность PHP: $$param - переменная переменной, те если $param = 'page', тогда будет $$param = $page. Данная запись будет аналогична: $page = $_GET['page'] ?? ''.
    if ($type == 'i') { // Проверка на тип данных. $type == 'i' - значит, что данные типа int
        return (int)$$param; // Вернем данные в переменной переменной "param" с приведением к типу (int)
    } elseif ($type == 'f') { // 'f' - ключ для float
        return (float)$$param; // Вернем данные в переменной переменной "param" с приведением к типу (float)
    } else {
        return trim ($$param); // Вернем строку, обрезанную от концевых пробелов $$param
    }

}

/**
 * @param string $key Key of $_POST array
 * @param string $type Values of 'i', 'f', 's'
 * @return float|int|string
 */
function post ($key, $type = 's') { // Данная функция будет получать данные из массива $_POST по ключу "$key" (названию элемента массива $_POST, который нам нужен). Дополнительно, данная функция будет проводить минимальную валидацию по типу данных "$type" (int, float, string)

    $param = $key; // Например, наша функция get('page') должна получить данные массива $_POST('page') по ключу "$key" = 'page'.
    $$param = $_POST[$param] ?? '';  // Возможность PHP: $$param - переменная переменной, те если $param = 'page', тогда будет $$param = $page. Данная запись будет аналогична: $page = $_POST['page'] ?? ''.
    if ($type == 'i') { // Проверка на тип данных. $type == 'i' - значит, что данные типа int
        return (int)$$param; // Вернем данные в переменной переменной "param" с приведением к типу (int)
    } elseif ($type == 'f') { // 'f' - ключ для float
        return (float)$$param; // Вернем данные в переменной переменной "param" с приведением к типу (float)
    } else {
        return trim ($$param); // Вернем строку, обрезанную от концевых пробелов $$param
    }

}

function __ ( $key ) { // Функция для вывода переводимой фразы на экран (в шаблоне, виде итд)
    echo \wfm\Language::get ($key);

}

function ___ ( $key ) { // Функция для возврата переводимой фразы чтобы сохранить ее в какой-либо переменной и использовать там, где нужно
    return \wfm\Language::get ($key);

}

function get_cart_icon ($id) { // Функция сохранения вида иконки статуса добавления товара в корзину (с добавить НА товар уже в корзине). На вход принимает $id товара
    if (!empty($_SESSION['cart']) && array_key_exists ($id, $_SESSION['cart'])) { // Проверка: корзина (массив $_SESSION['cart']) не должна быть пуста И есть ли у нас такой ключ в массиве $_SESSION['cart']
        $icon = '<i class="fas fa-luggage-cart"></i>'; // Товар находится в корзине
    } else { // Иначе,
        $icon = '<i class="fas fa-shopping-cart"></i>'; // Добавить товар в корзину
    }
    return $icon;

}

function get_field_value ($name) { // Функция для обработки (сохранения) вводимых данных пользователем в форму. Принимает на вход название поля $name, значение которого нужно вернуть

    return isset($_SESSION['form_data'][$name]) ? h($_SESSION['form_data'][$name]) : '';
    // Если в массиве с ключом $_SESSION['form_data'][$name] у нас есть данные - мы вернем их предварительно обработав для безопасности используя фунцию h. Иначе - вернем пустую строку

}

function get_field_array_value ($name, $key, $index) { // Функция для обработки (сохранения) вводимых данных пользователем в форму. Функция вернет многомерный массив данных. Принимает на вход название поля $name (category_description), значение которого нужно вернуть, ключ $key (id языка) и название поля $index (title)

    return isset($_SESSION['form_data'][$name][$key][$index]) ? h($_SESSION['form_data'][$name][$key][$index]) : '';
    // Если в массиве с ключом $_SESSION['form_data'][$name][$key][$index] у нас есть данные - мы вернем их предварительно обработав для безопасности используя фунцию h. Иначе - вернем пустую строку

}




